import React, { useState, useCallback } from "react";
import { View, Text, TouchableOpacity, StyleSheet, RefreshControl } from "react-native";
import { Calendar } from "react-native-calendars";
import { ScrollView } from "react-native-gesture-handler";
import Ionicons from "react-native-vector-icons/Ionicons";
import Collapsible from "react-native-collapsible";
import Styles from "../../Styles";
import { ActivityIndicator } from "react-native";
import { LinearGradient } from "expo-linear-gradient";
const TanuloKinyitottDatumok = ({
  naptarLenyitas,
  naptarToggle,
  orakLista,
  adatokBetoltese,
}) => {
  const ma = new Date();
  const [kivalasztottDatum, setKivalasztottDatum] = useState(ma);
  const [elkovetkezendoCollapsed, setElkovetkezendoCollapsed] = useState(true);
  const [teljesitettCollapsed, setTeljesitettCollapsed] = useState(true);
  const [frissites, setFrissites] = useState(false); //https://reactnative.dev/docs/refreshcontrol
  const [betolt, setBetolt] = useState(false);
  //------------------------------------------------------- MONDAT T√ñMB ------------------------
  const vezetoMondatok = [
    "Nem a gyorsas√°g, hanem a st√≠lus a l√©nyeg!",
    "A gyorsul√°s csak akkor men≈ë, ha a kanyar is j√≥l siker√ºl.",
    "Ne csak gyorsan, hanem okosan is vezess!",
    "A kressz m√°r megvan, √∫gyhogy j√∂het a vezet√©s!",
    "A legjobb sof≈ër mindig tudja, hogy mikor kell lass√≠tani.",
    "A j√≥ vezet≈ë nem hajt, hanem uralja az utat.",
    "Ne rohanj, hanem haladj st√≠lusosan!",
    "Vezetni men≈ë, de biztons√°gban maradni m√©g men≈ëbb.",
    "A legjobb vezet≈ëk nem a gyorsul√°sban, hanem az ir√°ny√≠t√°sban jeleskednek.",
    "A vol√°n m√∂g√∂tt minden d√∂nt√©s sz√°m√≠t ‚Äì v√°laszd meg okosan!",
    "A forgalom nem akad√°ly, hanem kih√≠v√°s. Kezeld √ºgyesen!",
    "Ne csak a g√°zt p√∂rgesd, hanem az agyad is!", //nem g√°z hanem iz√© az a m√°sik mutat√≥
  ]
  const maiNap = new Date().getDate();
  const kivalasztottMondat = vezetoMondatok[(maiNap-1) % vezetoMondatok.length];
  //------------------------------------------------------- OLDAL BET√ñLT√âS ------------------------
  const frissitesKozben = useCallback(() => {
    setFrissites(true);
    setBetolt(true);
    setTimeout(() => {
      adatokBetoltese();
      setFrissites(false);
      setBetolt(false);
    }, 2000);
  }, [adatokBetoltese]);
    if (betolt) {
        return (
          <View
            style={{
              flex: 1,
              justifyContent: "center",
              alignItems: "center",
              padding: 20,
            }}
          >
            <ActivityIndicator size="large" color="#007BFF" />
            <Text style={styles.betoltesText}>Az √≥r√°id bet√∂lt√©se folyamatban van...</Text>
          </View>
        );
      }
  const megjeloltNapok = () => {
    const megjelolve = {};
    orakLista.forEach((item) => {
      const datum = new Date(item.ora_datuma);
      const datumSzoveggeAlakitva = datum.toISOString().split("T")[0];
      megjelolve[datumSzoveggeAlakitva] = {
        marked: true,
        dotColor: "#2EC0F9",
      };
    });

    const kivalasztottDatumMegjelolve = kivalasztottDatum
      .toISOString()
      .split("T")[0];

    const vanEoraAkivalasztottNapon = orakLista.some((ora) => {
      const oraDateString = new Date(ora.ora_datuma).toISOString().split("T")[0];
      return oraDateString === kivalasztottDatumMegjelolve;
    });

    megjelolve[kivalasztottDatumMegjelolve] = {
      selected: true,
      marked: vanEoraAkivalasztottNapon,
      dotColor: vanEoraAkivalasztottNapon ? "#2EC0F9" : undefined,
    };

    return megjelolve;
  };

  const datumMegnyomas = (day) => {
    const ujDatum = new Date(day.dateString);
    setKivalasztottDatum(ujDatum);
  };

  const orakKulonvalasztasa = () => {
    const elkovetkezendoOra = [];
    const teljesitettOra = [];

    orakLista.forEach((ora) => {
      const oraIdopontja = new Date(ora.ora_datuma);
      if (oraIdopontja > ma) {
        elkovetkezendoOra.push(ora);
      } else {
        teljesitettOra.push(ora);
      }
    });
    return { elkovetkezendoOra, teljesitettOra };
  };

  const { elkovetkezendoOra, teljesitettOra } = orakKulonvalasztasa();

  const vanEoraAkivalasztottNapon = () => {
    const kivalasztottDatumFormazva = kivalasztottDatum.toISOString().split("T")[0];
    return orakLista.filter((ora) => {
      const oraFormazva = new Date(ora.ora_datuma).toISOString().split("T")[0];
      return oraFormazva === kivalasztottDatumFormazva;
    });
  };
  const kivalasztottNapOrai = vanEoraAkivalasztottNapon();

  return (
    <ScrollView 
            style={styles.container} 
            contentContainerStyle={{ flexGrow: 1 }} 
            keyboardShouldPersistTaps="handled" 
            refreshControl={
              <RefreshControl refreshing={frissites} onRefresh={frissitesKozben} />
            }
    >
      {/*----------------------------------- NAPONTA V√ÅLTOZ√ì MONDATOK R√âSZE -------------------------------- */}
      <LinearGradient
        colors={["#6A5AE0", "#2EC0F9"]}
        start={{ x: 0, y: 0 }} // sz√≠n√°tmenet ir√°nya
        end={{ x: 1, y: 1 }}
        style={{
          borderRadius: 20,
          padding: 2, // szeg√©ly
          marginHorizontal: 20,
          marginBottom: 20,
          shadowColor: "#000",
          shadowOffset: { width: 0, height: 4 },
          shadowOpacity: 0.3,
          shadowRadius: 8,
          elevation: 5,
        }}
      >
        <View style={{
          backgroundColor: "#ffffff",
          borderRadius: 18,
          padding: 20,
          alignItems: "center",
        }}>
          <Text style={{
            textAlign: "center",
            fontSize: 18,
            fontStyle: "italic",
            color: "#333",
            fontWeight: "500",
          }}>
            {kivalasztottMondat} üöóüí®
          </Text>
        </View>
      </LinearGradient>
      {/*----------------------------------- NAPT√ÅR R√âSZ -------------------------------- */}
      <View style={Styles.naptarView}>
        <Calendar
          style={Styles.naptar}
          onDayPress={(nap) => {
            datumMegnyomas(nap);
          }}
          onPressArrowLeft={(subtractMonth) => subtractMonth()}
          onPressArrowRight={(addMonth) => addMonth()}
          current={kivalasztottDatum.toISOString().split("T")[0]}
          theme={{
            backgroundColor: "#ffffff",
            calendarBackground: "#ffffff",
            textSectionTitleColor: "#b6c1cd",
            selectedDayBackgroundColor: "#6A5AE0",
            selectedDayTextColor: "white",
            todayTextColor: "#00adf5",
            dayTextColor: "#2d4150",
            textDisabledColor: "#dd99ee",
            "stylesheet.calendar.header": {
              header: {
                flexDirection: "row",
                justifyContent: "space-between",
                alignItems: "center",
                padding: 10,
              },
              monthText: {
                fontSize: 22,
                fontWeight: "bold",
                color: "#6A5AE0",
              },
              arrow: {
                fontSize: 20,
              },
            },
          }}
          markedDates={megjeloltNapok()}
          locale={"hu"}
        />
        {/*------------------------------ NAPT√ÅR KI BE NYIT√ìS GOMB !!! --------------------------*/}
        <TouchableOpacity onPress={naptarToggle}>
            {naptarLenyitas ? (
              <View style={Styles.naptarNyitogatoGombView2}>
                <Text style={{ color: "black", fontSize: 16 }}>
                  Napt√°r becsuk√°sa
                </Text>
                <Ionicons name="chevron-up-outline" size={30} color="black" />
              </View>
            ) : (
              <View style={Styles.naptarNyitogatoGombView2}>
                <Text style={{ color: "black", fontSize: 16 }}>
                  Napt√°r kinyit√°sa
                </Text>
                <Ionicons name="chevron-down-outline" size={30} color="black" />
              </View>
            )}
        </TouchableOpacity>
      </View>
      {/*----------------------------------- KIV√ÅLASZTOTT D√ÅTUM R√âSZ -------------------------------- */}
      <View style={Styles.kivalasztottDatumOraView}>
        <Text style={Styles.kivalasztottDatumOraCim}>
          √ìr√°k a kiv√°lasztott napon:
        </Text>
        {kivalasztottNapOrai.length > 0 ? (
          kivalasztottNapOrai.map((ora, index) => {
              // A kiv√°lasztott d√°tum √≥r√°inak megjelen√≠t√©se
              const date = new Date(ora.ora_datuma);
              // A h√≥nap r√∂vid neve (pl. "FEB") √©s a nap (pl. "03")
              const honap = date
                .toLocaleDateString("hu-HU", { month: "short" })
                .toUpperCase(); // R√∂vid h√≥napn√©v
              const nap = date.toLocaleDateString("hu-HU", { day: "2-digit" });
                const oraPerc = date.toLocaleTimeString("hu-HU", {
                  hour: "2-digit",
                  minute: "2-digit",
                  hour12: false,
                });
                const oraTipusSzoveg =
                ora.ora_tipusID === 1 ? `Tan√≥ra` : `Vizsga!`;
            return (
              <View>
                 <View key={index} style={ Styles.kivalasztottDatumOraViewBelsoResze }>
                    <Ionicons name="time-outline" size={24} color="#6A5AE0" style={{
                         marginRight: 10,
                    }} />
                    <View>
                      <Text style={Styles.kivalasztottDatumOraHonapNap}>{`${honap} ${nap}`}</Text>
                      <Text style={Styles.kivalasztottDatumOraTipus}>{`${oraTipusSzoveg}`}</Text>
                    </View>
                    <Text style={Styles.kivalasztottDatumOraPerc}>{`${oraPerc}`}</Text>
                </View>
              </View>
            );
          })
        ) : (
          <View style={Styles.nincsOraView}>
            <Ionicons name="calendar-outline" size={40} color="#6A5AE0" />
            <Text style={Styles.nincsOraText}>
              Nincsenek √≥r√°k a kiv√°lasztott napon.
            </Text>
          </View>
        )}
      </View>
      {/*----------------------------------- ELK√ñVETKEZEND≈ê √ìR√ÅK -------------------------------- */}
      <TouchableOpacity
        onPress={() => setElkovetkezendoCollapsed(!elkovetkezendoCollapsed)}
        style={Styles.lenyiloHeader}
      >
        <Text style={Styles.lenyiloHeaderText}>Elk√∂vetkezend≈ë √≥r√°k</Text>
        <Ionicons
          name={
            elkovetkezendoCollapsed
              ? "chevron-down-outline"
              : "chevron-up-outline"
          }
          size={24}
          color="#6A5AE0"
        />
      </TouchableOpacity>
      <Collapsible collapsed={elkovetkezendoCollapsed}>
        {elkovetkezendoOra.length === 0 ? (
          <View style={Styles.nincsOraView}>
            <Text style={Styles.nincsOraText}>
              Itt fognak megjelenni azok az √≥r√°k, amik m√©g nincsenek teljes√≠tve.
              Ezek olyan id≈ëpontok, amiket m√©g le kell vezetned, legyen az sima
              tan√≥ra, vagy vizsga.
            </Text>
          </View>
        ) : (
          elkovetkezendoOra.map((item, index) => {
            const date = new Date(item.ora_datuma);
            const honapNap = date
              .toLocaleDateString("hu-HU", {
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
              })
              .replace(/\//g, ".");
            const oraPerc = date.toLocaleTimeString("hu-HU", {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
            });
            return (
              <View key={item.ora_id} style={Styles.oraElem}>
                <Text style={Styles.oraDatuma}>{honapNap}</Text>
                <Text style={Styles.oraIdeje}>{oraPerc}</Text>
              </View>
            );
          })
        )}
      </Collapsible>
      {/*----------------------------------- TELJES√çTETT √ìR√ÅK -------------------------------- */}
      <TouchableOpacity
        onPress={() => setTeljesitettCollapsed(!teljesitettCollapsed)}
        style={Styles.lenyiloHeader}
      >
        <Text style={Styles.lenyiloHeaderText}>Teljes√≠tett √≥r√°k</Text>
        <Ionicons
          name={
            teljesitettCollapsed
              ? "chevron-down-outline"
              : "chevron-up-outline"
          }
          size={24}
          color="#6A5AE0"
        />
      </TouchableOpacity>
      <Collapsible collapsed={teljesitettCollapsed}>
        {teljesitettOra.length === 0 ? (
          <View style={Styles.nincsOraView}>
            <Text style={Styles.nincsOraText}>
              Itt fognak megjelenni azok az √≥r√°k, amiket m√°r sikeresen
              levezett√©l!
            </Text>
          </View>
        ) : (
          teljesitettOra.map((item, index) => {
            const datum = new Date(item.ora_datuma);
            const honapNap = datum
              .toLocaleDateString("hu-HU", {
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
              })
              .replace(/\//g, ".");
            const oraPerc = datum.toLocaleTimeString("hu-HU", {
              hour: "2-digit",
              minute: "2-digit",
              hour12: false,
            });
            return (
              <View key={item.ora_id} style={Styles.oraElem}>
                <Text style={Styles.oraDatuma}>{honapNap}</Text>
                <Text style={Styles.oraIdeje}>{oraPerc}</Text>
              </View>
            );
          })
        )}
      </Collapsible>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
    paddingHorizontal: 1,
    marginBottom: 50,
  },
});
export default TanuloKinyitottDatumok;